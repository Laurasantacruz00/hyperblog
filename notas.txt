cheackout --> ultimos cambios o ciertos cambios hechos por otra persona

Merge --> unir una rama con otra 
    git status --> estado del repositorio 

Un git pull es:
    git merge --> Fuciona la ultima version del repositorio local con el remoto
    git fetch --> trae actualizaciones del repositorio remoto pero no lo copia en mis archivos

    git commit -am --> hace un add y un commit al mismo tiempo solo funciona al haber hecho previamente un add y un commit

cached --> en memoria ram
    git add notas.txt --> añandiendo archivo al repositorio
    git rm --cached notas.txt --> eliminar el archivo añadido

Siempre se debe dejar un mensaje con "git commit"
    git config --> configuracion de git en el equipo
    git config --list --> Lista de la configuracion
    git config --global user.name "Laura Santacruz"
    git config --global user.email "lnsantacruzo@gmail.com"

    git show --> ver cambios que se han hecho en el archivo

    esc + shift + z + z --> para salir del editor de codigo de la linea de comando llamado VIM, 
    Para escribir se usa esc + i

TENGO QUE TOMAR EL CURSO DE INTERFAZ Y LINEA DE COMANDOS 
    git diff 02200f692aaa7dd1b9516142c270e4b1116fe071 62af9990249da9017c3a43db7b553460c302c431(junto con el id del commit anterior y nuevo)--> Para ver las diferencias entre un archivo y otro 

    git reset 02200f692aaa7dd1b9516142c270e4b1116fe071 --hard  --> para volver a TODA la version anterior
    git reset 02200f692aaa7dd1b9516142c270e4b1116fe071 --soft  --> para volver la version anterior pero conservando lo que ya se le hizo add
    
    git log        --> cambios realizados
    git log --stat --> Ver cambios especifico
    git log --all  --> todos los cambios realizados
    git log --graph --> muestra las ramas
    git log -- decorate --onelina --> muesta de forma comprimida las ramas 
    
Se puede crear un nombre como un estilo variable que llamara a la linea que queramos ej:
    alias arbolito="git log --all --graph --decorate --oneline" 

    git rm --> Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. 
    Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:

    git rm --cached --> Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
    git rm --force --> Elimina los archivos de Git y del disco duro. 

Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
    git reset --> Este comando nos ayuda a volver en el tiempo. 

Pero no como git checkout que nos deja ir, mirar, pasear y volver. 
Con git reset volvemos al pasado sin la posibilidad de volver al futuro. 
Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

    git reset --soft --> Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, 
    así podemos aplicar las últimas actualizaciones a un nuevo commit.
    git reset --hard --> Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

    git reset HEAD --> Este es el comando para sacar archivos del área de Staging. 
    No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos 
    no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo 
    en staging con git add, por supuesto.

    git branch cabecera --> Para creer un nueva rama 
    git checkout cabecera --> cambiar de rama 
    git remote add origin https://github.com/Laurasantacruz00/hyperblog.git -->Enlazar con un repositorio remoto
    git pull origin master --allow-unrelated-histories --> Forzar la subida de archivos remotos

HACER CURSO DE LINUX

Cifrado asimetrico de un solo camino:
    SSH-->Secure shell, PROTOCOLO PARA CONECTARNOS A SERVIDORES REMOTOS
    Estas llaves son por personas 
    Crear llaves --> ssh-keygen -t rsa -b 4096 -C "correo"
    llave privada --> id_rsa
    llave publica --> id_rsa.pub

    Agregar llave al entorno para que el so sepa que existe la llave
    Para saber que el servidor de llaves este prendido 
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_rsa --> Añadiendo llave privada 






